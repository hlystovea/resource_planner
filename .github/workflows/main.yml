name: Deploy resource_planner

on:
  push:
    branches: [ main, ]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt 
    - name: Test with flake8 and pytest
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        python -m flake8
        pytest

  copy_files:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: copy start files via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "*,!.git,!.github,!.venv,!.env"
          target: "~/resource_planner"
          overwrite: true

  deploy:
    runs-on: ubuntu-latest
    needs: copy_files
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd resource_planner
            sudo docker-compose stop
            sudo docker-compose rm planner_backend
            touch .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} > .env
            echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
            echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env
            sudo docker-compose up -d --build

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send telegram message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} completed successfully!
